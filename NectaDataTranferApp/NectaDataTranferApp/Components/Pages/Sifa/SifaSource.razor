@page "/sifasource"

@using System.Security;
@using System.Data.SqlClient
@using NectaDataTranferApp.Components.ComponetServer
@using NectaDataTranferApp.Services
@using Microsoft.FluentUI.AspNetCore.Components
@using Icons = Microsoft.FluentUI.AspNetCore.Components.Icons

@inject NavigationManager NavManager
@inject ISifaConnectionService SifaConnectionService
@inject ISifaTransferOption SifaTransferService
@inject IOlevelService OlevelService
@inject IDialogService _dialogService
@inject SessionService sessionservice
@inject ToastServiceNavigate ToastServiceNavigate
<FluentToastProvider />
<FluentDialogProvider />
<FluentTooltipProvider />
@rendermode @(new InteractiveServerRenderMode(prerender:false))
@if (user != null)
{

    <FluentCard Style="height:100%">
        <ToastNavigateComp /> <!-- Include the Toast component here -->
        <FluentLabel Typo="Typography.Header"> Source from EMIS DB</FluentLabel>

        <FluentGrid Style="margin-top:10px">
            <FluentStack VerticalGap="20" VerticalAlignment="VerticalAlignment.Center" Orientation="Orientation.Vertical">

                <FluentStack VerticalGap="20" VerticalAlignment="VerticalAlignment.Center" Orientation="Orientation.Vertical">

                    <FluentGridItem xs="12" sm="6" md="12">
                        @if (sqldatabases != null)
                        {
                            <FluentCombobox Autocomplete="ComboboxAutocomplete.Both" Id="cmbDBsource" @onchange="UpdateConnection" @bind-SelectedValue=@datasourceDB TOption="string" Label="Source EMIS Database">
                                @foreach (var dblist in sqldatabases)
                                {

                                    <FluentOption Value="@dblist.SqlDatabase">@dblist.SqlDatabase</FluentOption>
                                }
                            </FluentCombobox>
                        }

                    </FluentGridItem>
                </FluentStack>


                <FluentGridItem hidden="@ishiddenDate" Class="mt-4" xs="12" sm="6" md="12">

                    <FluentDatePicker Id="tmpYear" Label="Exam Year" AriaLabel="To" @bind-Value="@_year" View="CalendarViews.Years" />
                    <FluentTooltip Anchor="tmpYear" HideTooltipOnCursorLeave="true" Position=TooltipPosition.End Delay=200>For Sifa tables,eg tbl_2023_particulars</FluentTooltip>

                </FluentGridItem>

                <FluentGridItem Class="mt-2" xs="12" sm="3" md="6">
                    <FluentLabel>Transfer Option</FluentLabel>

                    <FluentRadioGroup Style="margin-top:10px; width:100%; border: 1px solid var(--accent-fill-rest)" @onchange="OnValueChanged" @bind-Value="@transferOption">
                        @if (isStoreDb)
                        {
                            <FluentRadio Value="@("4")">Changed Names from StoreDB</FluentRadio>
                            <FluentRadio Value="@("5")">Results after payment of School Fee</FluentRadio>
                            <FluentRadio Value="@("6")">Last updated Names</FluentRadio>
                            <FluentRadio Value="@("7")">Last updated Fee</FluentRadio>
                        }
                        else
                        {
                            <FluentRadio Value="@("1")">First Insert</FluentRadio>
                            <FluentRadio Value="@("2")">Update</FluentRadio>
                            <FluentRadio Value="@("3")">Add New with Result (eg PSLE repeater/ACSEE from Ualimu)</FluentRadio>
                            <FluentRadio Value="@("8")">Add New no Results (eg SFNA failer)</FluentRadio>
                        }

                    </FluentRadioGroup>


                </FluentGridItem>

                @*      <button @onclick="ShowToastAndNavigate">Show Toast with Navigate Button</button> *@

                <FluentGridItem Class="mt-2" xs="12" sm="6" md="9">

                    <div style="display: flex; align-items: end;">
                        <FluentStack>
                            <FluentSpacer Width="200" />
                            <FluentButton Loading="@isLoading" Class="save" @onclick="GetReg" IconEnd="@(new Icons.Regular.Size20.ArrowCircleRight())" Appearance="Appearance.Accent">
                                @if (@transferOption == "1")
                                {
                                    <FluentLabel Color="Color.Fill">Get Bulk Data</FluentLabel>
                                }
                                else if (@transferOption == "3")
                                {
                                    <FluentLabel Color="Color.Fill">Get New Data</FluentLabel>


                                }
                                else if (@transferOption == "4")
                                {
                                    <FluentLabel Color="Color.Fill">Get Names</FluentLabel>

                                }
                                else if (@transferOption == "5")
                                {
                                    <FluentLabel Color="Color.Fill">Get Request (Fee)</FluentLabel>

                                }
                                else if (@transferOption == "6")
                                {
                                    <FluentLabel Color="Color.Fill">Show Last Updated Names</FluentLabel>

                                }
                                else if (@transferOption == "7")
                                {
                                    <FluentLabel Color="Color.Fill">Show Last Updated (Fee)</FluentLabel>

                                }
                                else
                                {
                                    <FluentLabel Color="Color.Fill">Get Update Data</FluentLabel>

                                }
                            </FluentButton>
                        </FluentStack>
                    </div>

                </FluentGridItem>

                <FluentGridItem Class="mt-2" xs="3" sm="3" md="3">
                    @if (transferOption != "6" && transferOption != "7")
                    {
                        <div style="display: flex; align-items: center;">

                            <FluentProgress Style="width: auto; max-width:500px;min-width:300px; flex: 1; margin-right: 10px;" Stroke="ProgressStroke.Large" Value="@(indetermin ? null :@Value)" Max="@_maxvalue">

                            </FluentProgress>

                            <FluentLabel Color="Color.Error" Style="width: 80px;"><b>@_regpercent%</b></FluentLabel>

                        </div>
                    }
                </FluentGridItem>

                <FluentGridItem Class="mt-2" xs="12" sm="6" md="9">
                    @if (_regpercent == 100)
                    {
                        @if (transferOption == "4")
                        {
                            <FluentLabel>Total Candidate imported    @selectedItems2?.Count() </FluentLabel>

                        }
                        else if (transferOption == "5")
                        {
                            <FluentLabel>Total Candidate imported    @selectedItems3?.Count() </FluentLabel>
                        }
                        else
                        {
                            @if (transferOption != "6" && transferOption != "7")
                            {
                                <FluentLabel>Total Candidate imported  @TotalCandidate </FluentLabel>
                            }
                        }

                    }
                    else
                    {
                        @if (transferOption != "6" && transferOption != "7")
                        {
                            <FluentLabel>Data Imported : @regiondisplay </FluentLabel>
                        }

                    }

                </FluentGridItem>
                <FluentGridItem Class="mt-2" xs="12" sm="12" md="12">

                    <div style="display: flex; align-items: end;">
                        <FluentStack>
                            <FluentSpacer Width="200" />

                            @if (@transferOption == "4" || @transferOption == "5")
                            {

                                <FluentButton Id="btnSubmitSelect" Class="save" @onclick="SubmitSelected" Appearance="Appearance.Accent">
                                    <FluentLabel Color="Color.Fill">Submit Selected</FluentLabel>
                                </FluentButton>

                            }

                        </FluentStack>
                    </div>

                </FluentGridItem>

                <FluentGridItem Class="mt-2" xs="12" sm="12" md="12">

                    @if (@transferOption == "4")
                    {
                        <div style="height: 200px; width:auto; margin-top:15px; overflow-x:auto;">
                            <FluentDataGrid Id="dgridsourcenames" GenerateHeader="GenerateHeaderOption.Sticky" Style="height=100%;width=550px;" ResizableColumns="false" Virtualize="true" Items="@names2" ShowHover="true" TGridItem="SifaNameModelView">
                                <ChildContent>
                                    <SelectColumn TGridItem="SifaNameModelView"
                                    SelectMode="@DataGridSelectMode.Multiple"
                                    @bind-SelectedItems="@selectedItems2" />
                                    <PropertyColumn Width="110px" Property="@(p => p.ExamNumber)" Title="Number" Sortable="true" />
                                    <PropertyColumn Width="80px" Property="@(p => p.ExamYear)" Title="Year" Sortable="true" />
                                    <PropertyColumn Width="80px" Property="@(p => p.ExamName)" Title="Type" Sortable="true" />
                                    <PropertyColumn Width="120px" Property="@(p => p.Fname)" Title="Fname" Sortable="true" />
                                    <PropertyColumn Width="120px" Property="@(p => p.Oname)" Title="Mname" Sortable="true" />
                                    <PropertyColumn Width="120px" Property="@(p => p.Sname)" Title="Sname" Sortable="true" />
                                    <PropertyColumn Width="70px" Property="@(p => p.Sex)" Title="Sex" />
                                    <PropertyColumn Width="150px" Property="@(p => p.SifaTable)" Title="SifaTable" />
                                </ChildContent>
                                <EmptyContent>
                                    <FluentIcon Value="@(new Icons.Filled.Size24.PeopleAdd())" Color="@Color.Accent" />&nbsp; Nothing to see here. Press Get Names!
                                </EmptyContent>
                                <LoadingContent>
                                    <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
                                        Loading...<br />
                                        <FluentProgress Width="240px" />
                                    </FluentStack>
                                </LoadingContent>
                            </FluentDataGrid>
                        </div>

                    }
                    else if (@transferOption == "5")
                    {

                        <div style="height: 200px; width:auto; margin-top:15px; overflow-x:auto;">
                            <FluentDataGrid GenerateHeader="GenerateHeaderOption.Sticky" Id="dgridsouecefee" Style="height=100%;width=720px;" ResizableColumns="false" Virtualize="true" Items="@names3" ShowHover="true" TGridItem="SifaNameModelView">
                                <ChildContent>

                                    <SelectColumn TGridItem="SifaNameModelView"
                                    SelectMode="@DataGridSelectMode.Multiple"
                                    @bind-SelectedItems="@selectedItems3" />
                                    <PropertyColumn Width="110px" Property="@(p => p.ExamNumber)" Title="Number" Sortable="true" />
                                    <PropertyColumn Width="80px" Property="@(p => p.ExamYear)" Title="Year" Sortable="true" />
                                    <PropertyColumn Width="80px" Property="@(p => p.ExamName)" Title="Type" Sortable="true" />
                                    <PropertyColumn Width="250px" Property="@(p => p.Fname)" Title="Full Name" Sortable="true" />
                                    <PropertyColumn Width="150px" Property="@(p => p.SifaTable)" Title="SifaTable" />
                                    <PropertyColumn Width="150px" Property="@(p => p.EmisDB)" Title="EmisDB" />
                                </ChildContent>

                                <EmptyContent>
                                    <FluentIcon Value="@(new Icons.Filled.Size24.Money())" Color="@Color.Accent" />&nbsp; Nothing to see here. Press Get Request (Fee)!
                                </EmptyContent>
                                <LoadingContent>
                                    <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
                                        Loading...<br />
                                        <FluentProgress Width="240px" />
                                    </FluentStack>
                                </LoadingContent>
                            </FluentDataGrid>
                        </div>


                        <div style="height: 200px;width:400px; margin-top:15px; overflow-x:auto; scroll;">
                            <FluentDataGrid Id="dgridslist" Items="@dlist" Style="height=100%; width:450px;" ResizableColumns=false>
                                <PropertyColumn Width="150px" Property="@(p=>p.Data)" Sortable="true" />
                                <PropertyColumn Width="300px" Property="@(p=>p.Records)" Sortable="true" />
                            </FluentDataGrid>
                        </div>



                    }
                    else if (transferOption == "6")
                    {
                        <h5>List of last updated names</h5>
                        <div style="height: 200px;width:400px; margin-top:15px; overflow:auto; scroll;">
                            <FluentDataGrid Id="dgridalllist" Items="@dlistname" Style="height=100%; width:300px;" ResizableColumns=true Virtualize="true" GenerateHeader="GenerateHeaderOption.Sticky">
                                <ChildContent>
                                    <PropertyColumn Width="150px" Property="@(p=>p.Data)" Sortable="true" Title="Number" />
                                    <PropertyColumn Width="150px" Property="@(p=>p.Records)" Title="Type - Year" Sortable="false" />
                                </ChildContent>
                                <EmptyContent>
                                    <FluentIcon Value="@(new Icons.Filled.Size24.PeopleAdd())" Color="@Color.Error" />&nbsp; Press Show Last Updated Names!
                                </EmptyContent>
                                <LoadingContent>
                                    <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
                                        Loading...<br />
                                        <FluentProgress Width="240px" />
                                    </FluentStack>
                                </LoadingContent>
                            </FluentDataGrid>
                        </div>
                    }
                    else if (transferOption == "7")
                    {
                        <h5>List of last updated Fees</h5>
                        <div style="height: 200px;width:400px; margin-top:15px; overflow:auto; scroll;">
                            <FluentDataGrid Id="dgridalllist" Items="@dlistfee" Style="height=100%; width:300px;" ResizableColumns=true Virtualize="true" GenerateHeader="GenerateHeaderOption.Sticky">
                                <ChildContent>
                                    <PropertyColumn Width="150px" Property="@(p=>p.Data)" Sortable="true" Title="Number" />
                                    <PropertyColumn Width="150px" Property="@(p=>p.Records)" Title="Type - Year" Sortable="false" />
                                </ChildContent>
                                <EmptyContent>

                                    <FluentIcon Value="@(new Icons.Filled.Size24.Money())" Color="@Color.Error" />&nbsp; Press Show Last Updated (Fee)!
                                </EmptyContent>
                                <LoadingContent>
                                    <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
                                        Loading...<br />
                                        <FluentProgress Width="240px" />
                                    </FluentStack>
                                </LoadingContent>
                            </FluentDataGrid>
                        </div>
                    }
                    else

                    {
                        <div style="height: 200px;width:400px; margin-top:15px; overflow:auto; scroll;">
                            <FluentDataGrid Id="dgridalllist" Items="@dlist" Style="height=100%; width:300px;" ResizableColumns=true>
                                <PropertyColumn Width="150px" Property="@(p=>p.Data)" Sortable="true" />
                                <PropertyColumn Width="150px" Property="@(p=>p.Records)" Sortable="false" />
                            </FluentDataGrid>
                        </div>
                    }




                </FluentGridItem>

                @if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <FluentLabel Id="lbError" Color="Color.Error">@_errorMessage</FluentLabel>
                }


            </FluentStack>
        </FluentGrid>
    </FluentCard>

    <ErrorBoundary>
        <ErrorContent Context="Exception">
            <div class="alert bg-danger text-white alert-dismissible">
                @Exception.GetType(): @Exception.Message
                <button class="btn-close" @onclick="@errorBoundary.Recover"></button>
            </div>
        </ErrorContent>
    </ErrorBoundary>
}
else
{
    <FluentLabel Class="mt-4">@loginmesseage</FluentLabel>
}
@code {
    [Parameter]
    public int id { get; set; }
    bool ishidden = true;
    bool ishiddenDate = false;
    private string datasource = "Sql";
    //[Parameter]
    //public string classname { get; set; }
    private string _yearselected;
    private string datasourceDB = "";
    private int _port = 1433;
    private int _maxvalue;
    private string regiondisplay;
    private string _host = "127.0.0.1";
    private string _username = "sa";
    private string _pwd = "2021necta";
    private int _connId;
    private string _connectionName;
    private string _connectionString;
    SqlModel model = new();
    private List<SifaSqlDatabaseModel> sqldatabases = new();
    private List<ParticularModel> pdata = new();
    private List<SifaNameModel> sifanamedata = new();
    private List<ResultModel> rdata = new();
    private List<CentreModel> cdata = new();
    private List<GradeModel> gdata = new();
    private List<SubjectModel> sdata = new();
    private List<QtvalueModel> qdata = new();
    private List<TypeModel> tdata = new();
    private List<YearModel> yearss = new();
    string pconnstrSql = string.Empty;
    public string transferOption { get; set; } = "2";
    public int Value { get; set; }
    public int _regpercent { get; set; }
    private List<SchoolModel> schools = new();
    private int TotalCandidate;
    private int TotalData;
    string[] headings = { "Data", "Records" };
    record DataListModel(Guid Id, string Data, string Records);
    private IQueryable<DataListModel>? dlist;
    private IQueryable<DataListModel>? dlistname;
    private IQueryable<DataListModel>? dlistfee;
    private List<DataListModel> datalists = new();
    List<String> rows = new List<String>();
    DateTime? _year;
    private bool yearreadonly = true;
    private bool yeareditable = false;
    //Adornment yearicon = Adornment.None;
    bool indetermin = false;
    private SqlModel ModelToEdit = new();
    private ErrorBoundary errorBoundary;
    string _errorMessage;
    string loginmesseage = "";
    private UserDto user;
    bool isStoreDb = false;
    bool isLoading = false;

    //private MudTable<SifaNameModel> _table;
    private List<SifaNameModel> names = new List<SifaNameModel>();



    private bool _selectOnRowClick = false;

    private IQueryable<SifaNameModelView>? names2;
    private IQueryable<SifaNameModelView>? names3;
    IEnumerable<SifaNameModelView> selectedItems2 = new List<SifaNameModelView>();
    IEnumerable<SifaNameModelView> selectedItems3 = new List<SifaNameModelView>();


    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    protected override async Task OnInitializedAsync()
    {
        await GetSessionUser();
        if (user != null)
        {
            await GetSourceDatabase();
            ishidden = false;
            StateHasChanged();
        }
        else
        {
            loginmesseage = "Your not Login,Please use Login botton at right side";
        }

    }

    private async Task GetSessionUser()
    {
        user = await sessionservice.GetUserSession("user1");

    }

    private bool OpenConnSql(string conn)
    {
        SqlConnection connection = new SqlConnection(conn);
        try
        {
            connection.Open();
            return true;

        }
        catch (SqlException ex)
        {
            snackBar.ShowError(ex.Message, 4000);
            return false;
        }
    }
    //private async void OnConnect(SqlModel cmodel)
    //{
    //	ishidden = true;

    //	_host = ModelToEdit.Host;
    //	_port = ModelToEdit.Port;
    //	_username = ModelToEdit.Username;
    //	_pwd = ModelToEdit.Password;

    //	pconnstrSql = "Data Source=" + _host + ";Initial Catalog= " + datasourceDB + ";User ID=" + _username + ";" + "password = " + _pwd + ";" + "Connection Timeout=2;Encrypt=False";

    //	if (OpenConnSql(pconnstrSql))
    //	{
    //		int response = -1;
    //		_connId = 0;
    //		_connectionName = "sql";
    //		_connectionString = pconnstrSql;

    //		// To check if Sqlite has connection string
    //		//	await GetConnectionId(_connectionName);

    //		SqlSifaConnectionModel conMod = new()
    //			{
    //				Id = _connId,
    //				Name = _connectionName,
    //				ConnectionString = _connectionString,

    //			};

    //		if (_connId > 0)
    //		{
    //			//Update Connection string
    //			response = await SifaConnectionService.UpdateConnection(conMod);
    //		}
    //		else
    //		{
    //			response = await SifaConnectionService.AddConnection(conMod);

    //		}
    //		snackBar.Add("Connection Successful.", Severity.Success, config => { config.VisibleStateDuration = 1000; });

    //		await GetSourceDatabase();

    //		ishidden = false;
    //		StateHasChanged();

    //	}
    //	else
    //	{

    //		return;

    //	}

    //}

    private async ValueTask GetConnectionId(string conntype, string uname)
    {
        var conModelList = await SifaConnectionService.GetConnectionByNameUsername(conntype, uname);

        var query2 = from element in conModelList
                     where element.Name == conntype && element.Username == uname
                     select element.Id;

        _connId = query2.FirstOrDefault();

    }

    private async Task GetSourceDatabase()
    {

        //sqldatabases = await OlevelService.GetSqlDatabases(user.UserName);
        var result = await OlevelService.GetSqlDatabases2(user.UserName);

        if (result.StatusCode == 500)
        {
            snackBar.ShowError(result.Message!, 4000);
        }
        else
        {
            sqldatabases = result.SifaSqlDBModelList!;
            var query2 = from element in sqldatabases
                         where element.SqlDatabase != ""
                         select element.SqlDatabase;

            datasourceDB = query2.FirstOrDefault() ?? "";
            SelectYear();
        }

        StateHasChanged();
    }
    private async Task UpdateConnection(ChangeEventArgs e)
    {
        string newValue = e.Value?.ToString();
        datasourceDB = newValue;
        StateHasChanged();
        SelectYear();
        _username = user.UserName;
    }
    private async Task OnValueChanged(ChangeEventArgs e)
    {
        string newValue = e.Value?.ToString();
        // Console.WriteLine($"Value changed to: {newValue}");
        if (newValue == "6")
        {
            await ListNameAsnyc();
        }
        else if (newValue == "7")
        {
            await ListFeeAsnyc();
        }

    }
    private async void SelectYear()
    {

        StateHasChanged();
        if (datasourceDB != "" || datasourceDB != null)
        {

            if (datasourceDB.ToLower().Contains("emis"))
            {
                isStoreDb = true;
                transferOption = "4";

                DateTime date = new DateTime(DateTime.Now.Year, 1, 1);
                _year = date;
                yearreadonly = true;
                yeareditable = true;
                //yearicon = Adornment.None;
                ishiddenDate = true;
            }
            else
            {
                isStoreDb = false;
                transferOption = "2";
                ishiddenDate = false;

                string yearString = string.Join("", datasourceDB.ToCharArray().Where(Char.IsDigit));
                int year;
                if (int.TryParse(yearString, out year))
                {
                    DateTime date = new DateTime(year, 1, 1);
                    _year = date;
                    yearreadonly = true;
                    yeareditable = true;
                    //yearicon = Adornment.None;
                }
                else
                {
                    yearreadonly = false;
                    yeareditable = false;
                    //  yearicon = Adornment.End;
                    _year = null;
                }
            }
        }

        StateHasChanged();
    }

    private async ValueTask GetSelectYear()
    {

        try
        {
            await OlevelService.DeleteAllYear<YearModel>(user.UserName);
        }
        catch (Exception)
        {

        }

        string myYear = DateTime.Parse(_year.ToString()).Year.ToString();

        var yearModel = new YearModel
            {
                YearSelected = myYear,
                UserName = user.UserName
            };
        await OlevelService.AddYear(yearModel);

        _yearselected = myYear;

    }

    private async Task InsertOption(string toption, string toptionname, string uname)
    {

        try
        {
            var delopt = await SifaTransferService.DeleteAllOption<SifaTransferOptionModel>(uname);
        }
        catch (Exception)
        {

        }

        var optModel = new SifaTransferOptionModel
            {
                TransferOption = toption,
                TransferOptionName = toptionname,
                Username = uname

            };
        await SifaTransferService.AddOption(optModel);

    }

    private async Task GetReg()
    {

        rows.Clear();
        datalists.Clear();
        if (datasourceDB != "")
        {

            _username = user.UserName;

            var conModelList = await SifaConnectionService.GetConnectionByNameUsername("sql", _username);
            if (conModelList.Count() != 0)
            {
                foreach (var item in conModelList)
                {
                    _pwd = Setting.DecryptionMe(item.Pwd);
                    _host = item.Host;
                    _port = item.Port;

                }
            }
            else
            {
                snackBar.ShowWarning("Please Logout and Login again!", 3000);
                return;
            }

            string pconnstrSql = "Data Source=" + _host + ";Initial Catalog= " + datasourceDB + ";User ID=" + _username + ";" + "password = " + _pwd + ";" + "Connection Timeout=0;Encrypt=False";

            int response = -1;
            _connId = 0;
            _connectionName = "sql";
            _connectionString = pconnstrSql;

            // To check if Sqlite has connection string
            await GetConnectionId(_connectionName, _username);

            SifaConnectionModel conMod = new()
                {
                    Id = _connId,
                    Name = _connectionName,
                    ConnectionString = Setting.EncryptionMe(_connectionString),
                    Username = _username,
                    Pwd = Setting.EncryptionMe(_pwd),
                    Port = _port,
                    Host = _host
                };

            if (_connId > 0)
            {
                //Update Connection string
                response = await SifaConnectionService.UpdateConnection(conMod);
            }
            else
            {
                response = await SifaConnectionService.AddConnection(conMod);

            }


            if (transferOption != "4" && transferOption != "5" && transferOption != "6" && transferOption != "7")
            {
                if (_year.ToString() == "")
                {
                    snackBar.ShowWarning("Please select Year of SIFA TABLES to be used during transfer !", 4000);

                    return;

                }

                await GetSelectYear();

                var getyear = await OlevelService.GetYearByName(_yearselected);

                if (getyear == null)
                {

                    snackBar.ShowWarning("Please select Year of SIFA TABLES to be used during transfer !", 4000);
                    return;
                }
            }

            if (transferOption == "1" || transferOption == "3" || transferOption == "8")  // Bulk Insert
            {
                isLoading = true;
                await InsertOption(transferOption, "First Insert", _username);

                var p = OlevelService.DeleteAllParticular<ParticularModel>();
                var r = OlevelService.DeleteAllResult<ResultModel>();
                var c = OlevelService.DeleteAllCentre<CentreModel>();
                var q = OlevelService.DeleteAllQtvalue<QtvalueModel>();
                var g = OlevelService.DeleteAllGrade<GradeModel>();
                var s = OlevelService.DeleteAllSubject<SubjectModel>();
                var t = OlevelService.DeleteAllType<TypeModel>();

                await Task.WhenAll(p, r, c, q, g, s, t);

                var k = await OlevelService.UpdateParticularKey();

                int TotalCandidateRegion = 0;
                int csvDataRowCount;
                int rowcount2;
                double stps2;
                int Steps2;
                int skp2;

                #region Particular

                TotalCandidateRegion = 0;
                _regpercent = 1 * 100 / 100;
                indetermin = true;
                StateHasChanged();
                try
                {
                    pdata = await OlevelService.GetAllParticular(_username);
                }
                catch (SqlException ex)
                {
                    // display error message
                    _errorMessage = $"An error occurred while retrieving data: {ex.Message}";
                    await Task.FromResult(0);
                }
                indetermin = false;

                regiondisplay = "Particular";
                StateHasChanged();
                TotalCandidateRegion = pdata.Count();

                csvDataRowCount = pdata.Count;
                rowcount2 = csvDataRowCount;
                stps2 = csvDataRowCount / 10000.00000;
                Steps2 = Convert.ToInt32(Math.Ceiling(Convert.ToDecimal(stps2)));
                skp2 = 0;

                _maxvalue = Steps2;
                for (int i = 1; i <= Steps2; i++)
                {

                    var listcsv = pdata.AsEnumerable().Skip(skp2).Take(10000).ToList();

                    Value = i;
                    _regpercent = Value * 100 / _maxvalue;

                    await OlevelService.AddParticularAll(listcsv);

                    skp2 = skp2 + 10000;
                    StateHasChanged();
                }

                rows.Add(regiondisplay + "," + TotalCandidateRegion.ToString());
                var dli = new DataListModel(Guid.NewGuid(), regiondisplay, TotalCandidateRegion.ToString());
                datalists.Add(dli);
                dlist = datalists.AsQueryable();
                StateHasChanged();
                #endregion

                if (transferOption != "8")
                {
                    #region Result

                    TotalCandidateRegion = 0;
                    _regpercent = 1 * 100 / 100;
                    indetermin = true;
                    StateHasChanged();

                    try
                    {
                        rdata = await OlevelService.GetAllResult(_username);
                    }
                    catch (SqlException ex)
                    {
                        // display error message
                        _errorMessage = $"An error occurred while retrieving data: {ex.Message}";
                        await Task.FromResult(0);
                    }
                    indetermin = false;
                    regiondisplay = "Result";
                    StateHasChanged();
                    TotalCandidateRegion = rdata.Count();

                    csvDataRowCount = rdata.Count;
                    rowcount2 = csvDataRowCount;
                    stps2 = csvDataRowCount / 10000.00000;
                    Steps2 = Convert.ToInt32(Math.Ceiling(Convert.ToDecimal(stps2)));
                    skp2 = 0;

                    _maxvalue = Steps2;
                    for (int i = 1; i <= Steps2; i++)
                    {

                        var listcsv = rdata.AsEnumerable().Skip(skp2).Take(10000).ToList();

                        Value = i;
                        _regpercent = Value * 100 / _maxvalue;

                        await OlevelService.AddResultAll(listcsv);

                        skp2 = skp2 + 10000;
                        StateHasChanged();
                    }

                    rows.Add(regiondisplay + "," + TotalCandidateRegion.ToString());
                    var dli2 = new DataListModel(Guid.NewGuid(), regiondisplay, TotalCandidateRegion.ToString());
                    datalists.Add(dli2);
                    dlist = datalists.AsQueryable();
                    StateHasChanged();
                    #endregion
                }
                #region Centre

                TotalCandidateRegion = 0;
                _regpercent = 1 * 100 / 100;
                indetermin = true;
                StateHasChanged();

                cdata = await OlevelService.GetAllCentre(_username);
                indetermin = false;
                regiondisplay = "Centre";
                StateHasChanged();
                TotalCandidateRegion = cdata.Count();

                csvDataRowCount = cdata.Count;
                rowcount2 = csvDataRowCount;
                stps2 = csvDataRowCount / 10000.00000;
                Steps2 = Convert.ToInt32(Math.Ceiling(Convert.ToDecimal(stps2)));
                skp2 = 0;

                _maxvalue = Steps2;
                for (int i = 1; i <= Steps2; i++)
                {

                    var listcsv = cdata.AsEnumerable().Skip(skp2).Take(10000).ToList();

                    Value = i;
                    _regpercent = Value * 100 / _maxvalue;

                    await OlevelService.AddCentreAll(listcsv);

                    skp2 = skp2 + 10000;
                    StateHasChanged();
                }

                rows.Add(regiondisplay + "," + TotalCandidateRegion.ToString());
                var dli3 = new DataListModel(Guid.NewGuid(), regiondisplay, TotalCandidateRegion.ToString());
                datalists.Add(dli3);
                dlist = datalists.AsQueryable();
                StateHasChanged();
                #endregion

                #region Others

                TotalCandidateRegion = 0;
                _regpercent = 1 * 100 / 100;
                indetermin = true;
                StateHasChanged();

                sdata = await OlevelService.GetAllSubject(_username);
                tdata = await OlevelService.GetAllType(_username);
                gdata = await OlevelService.GetAllGrade(_username);
                qdata = await OlevelService.GetAllQtvalue(_username);

                var slistcsv = OlevelService.AddSubjectAll(sdata);
                var tlistcsv = OlevelService.AddTypeAll(tdata);
                var glistcsv = OlevelService.AddGradeAll(gdata);
                var qlistcsv = OlevelService.AddQtvalueAll(qdata);

                await Task.WhenAll(slistcsv, tlistcsv, glistcsv, qlistcsv);

                indetermin = false;
                regiondisplay = "Others";
                _regpercent = 100 * 100 / 100;
                StateHasChanged();

                rows.Add(regiondisplay + "," + "Complete");
                var dli4 = new DataListModel(Guid.NewGuid(), regiondisplay, "Complete");
                datalists.Add(dli4);
                dlist = datalists.AsQueryable();
                isLoading = false;
                StateHasChanged();
                #endregion


                ToastServiceNavigate.ShowToast("Navigating to destination page!", "Info", true, 8000, "/sifadestination");

                // var dialog = await _dialogService.ShowConfirmationAsync("To get destination page click Yes. If you want to remain in this page click No", primaryText: "Yes", secondaryText: "No", "Data retrival completed!");
                // var result = await dialog.Result;
                // if (!result.Cancelled)
                // {
                //     Desti();
                // }
                //ShowDestination();
            }

            else if (transferOption == "4")
            {
                await GetNamesAsnyc();
            }
            else if (transferOption == "5")
            {
                await UpdateFeeAsnyc();
            }
            else if (transferOption == "6")
            {
                await ListNameAsnyc();
            }
            else if (transferOption == "7")
            {
                await ListFeeAsnyc();
            }
            else
            {

                await UpdateAsnyc();

            }

        }
        else
        {
            snackBar.ShowWarning("Please,Select database or check database which has sifa views for this job!", 4000);
        }

    }



    void ShowDestination()
    {
        // snackBar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        // snackBar.Add("Data retrival completed! Open Sifa Destionation", Severity.Success, config =>
        // {
        //     config.Action = "Open";

        //     config.RequireInteraction = true;
        //     config.ActionColor = Color.Primary;
        //     config.Onclick = snackbar =>
        //     {
        //         Desti();
        //         return Task.CompletedTask;
        //     };
        // });
    }
    public void Desti()
    {
        NavManager.NavigateTo("/sifadestination");
    }

    bool OpenConnMysql(string conn)
    {
        MySqlConnection connection = new MySqlConnection(conn);

        try
        {
            connection.Open();
            return true;

        }
        catch (MySqlException ex)
        {
            int number;
            if (ex.InnerException != null && ex.InnerException is MySqlException)
            {
                number = ((MySqlException)ex.InnerException).Number;
            }
            else
            {
                number = ex.Number;
            }

            switch (number)
            {

                case 0:
                    snackBar.ShowError("Cannot connect to server.Contact administrator", 4000);
                    break;

                case 1045:
                    snackBar.ShowError("Invalid username/password,please try again", 4000);
                    break;
                case 1042:
                    snackBar.ShowError("Invalid host/port number,please try again", 4000);
                    break;
                case 1049:
                    snackBar.ShowError("Invalid Database,please try again", 4000);
                    break;
            }

            return false;
        }
    }

    private async Task InSchoolsForUpdate()
    {

        await Task.WhenAll(OlevelService.DeleteAllParticular<ParticularModel>(), OlevelService.DeleteAllParticular<ResultModel>());

        //foreach (var myclasses in classes)
        //{
        //	var claModel = new Models.ClassModel
        //		{
        //			ClassId = myclasses.ClassId,
        //			ClassName = myclasses.ClassName

        //		};
        //	await CsvService.AddClass(claModel);

        //}

    }
    public record SifaUpdateRecord
    {
        public int Id { get; set; }
        public string? myUsername { get; set; }
        public string? myeyear { get; set; }
        public string? mydb { get; set; }

    }
    private async Task UpdateAsnyc()
    {
        rows.Clear();
        datalists.Clear();
        var t = await OlevelService.DeleteAllType<TypeModel>();
        tdata = await OlevelService.GetAllType(user.UserName);

        if (datasourceDB.ToLower().Contains("tefis") || datasourceDB.ToLower().Contains("conso"))
        {
            if (_yearselected == "")
            {
                snackBar.ShowWarning("Please select Year of SIFA TABLES to be used during transfer !", 4000);

                return;

            }


        }

        var at = await OlevelService.AddTypeAll(tdata);
        SifaUpdateRecord DialogData = new() { Id = 1, myUsername = _username, myeyear = _yearselected,mydb = datasourceDB};
        var data = DialogData with { Id = 1 };
        StateHasChanged();

        var parameters = new DialogParameters()
            {
                Height = "440px",
                Title = "Centre list for Update",
                PreventDismissOnOverlayClick = true,
                PreventScroll = false,
            };
        // parameters.Add("username", _username);
        //var dialog = await _dialogService.Show<SifaUpdateDialog>("Candidate list for Update", parameters).Result;

        var dialog = await _dialogService.ShowDialogAsync<SifaUpdateDialog>(data, parameters);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {


            //Insert for Log in sql
            await InsertOption(transferOption, "Update", _username);

            pdata = await OlevelService.GetAllParticularSqlite();

            if (datasourceDB.ToLower().Contains("tefis") || datasourceDB.ToLower().Contains("conso"))
            {
                var cc = OlevelService.DeleteAllCentre<CentreModel>();
                var g = OlevelService.DeleteAllGrade<GradeModel>();
                var s = OlevelService.DeleteAllSubject<SubjectModel>();
                var tt = OlevelService.DeleteAllType<TypeModel>();
                await Task.WhenAll(cc, g, s, tt);
            }

            TotalCandidate = 0;

            int totalcand = pdata.Count();

            if (totalcand != 0)
            {
                _maxvalue = totalcand;

                for (int i = 0; i < totalcand; i++)
                {
                    regiondisplay = pdata[i].SzCandidatesNumber.ToString();

                    var mycentre = await OlevelService.GetCentreByCentreno(pdata[i].SzExamCentreNumber, user.UserName);
                    var c = await OlevelService.AddCentreAll(mycentre);

                    if (datasourceDB.ToLower().Contains("tefis") || datasourceDB.ToLower().Contains("conso"))
                    {

                        var mycandresult = await OlevelService.GetResultByCandnoTefis(pdata[i].SzCandidatesNumber, pdata[i].Etype, user.UserName,_yearselected);
                        var r = await OlevelService.AddResultAll(mycandresult);
                    }
                    else
                    {
                        var mycandresult = await OlevelService.GetResultByCandno(pdata[i].SzCandidatesNumber, pdata[i].Etype, user.UserName);
                        var r = await OlevelService.AddResultAll(mycandresult);
                    }
                    

                    Value = i + 1;
                    _regpercent = Value * 100 / totalcand;
                    rows.Add(regiondisplay + "," + pdata[i].Fname.ToString());
                    var dli4 = new DataListModel(Guid.NewGuid(), regiondisplay, pdata[i].Fname.ToString());
                    datalists.Add(dli4);
                    dlist = datalists.AsQueryable();
                    TotalCandidate += i;
                    StateHasChanged();
                }

            }

            ToastServiceNavigate.ShowToast("Navigating to destination page!", "Info", true, 8000, "/sifadestination");

            // var dialog2 = await _dialogService.ShowConfirmationAsync("To get destination page click Yes. If you want to remain in this page click No", primaryText: "Yes", secondaryText: "No", "Data retrival completed!");
            // var result2 = await dialog2.Result;
            // if (!result2.Cancelled)
            // {
            //     Desti();
            // }
            //ShowDestination();
        }
    }
    private async Task GetNamesAsnyc()
    {
        if (transferOption == "4")  // Changed Names
        {
            if (names.Count() != 0)
            {
                names.Clear();

            }

            StateHasChanged();
            await InsertOption(transferOption, "Names Insert", _username);

            var p = await OlevelService.DeleteAllSifaName<SifaNameModel>();
            var p2 = await OlevelService.DeleteAllSifaName2<SifaNameModel2>();


            int TotalCandidateRegion = 0;
            int csvDataRowCount;
            int rowcount2;
            double stps2;
            int Steps2;
            int skp2;

            #region Particular

            TotalCandidateRegion = 0;
            _regpercent = 1 * 100 / 100;
            indetermin = true;
            StateHasChanged();

            sifanamedata = await OlevelService.GetAllSifaName(_username);
            indetermin = false;

            TotalCandidateRegion = sifanamedata.Count();
            if (TotalCandidateRegion != 0)
            {
                csvDataRowCount = sifanamedata.Count;
                rowcount2 = csvDataRowCount;
                stps2 = csvDataRowCount / 1.00000;
                Steps2 = Convert.ToInt32(Math.Ceiling(Convert.ToDecimal(stps2)));
                skp2 = 0;
                regiondisplay = "Particular";
                StateHasChanged();
                _maxvalue = Steps2;
                for (int i = 1; i <= Steps2; i++)
                {

                    var listcsv = sifanamedata.AsEnumerable().Skip(skp2).Take(1).ToList();

                    Value = i;
                    _regpercent = Value * 100 / _maxvalue;

                    await OlevelService.AddSifaNameAll(listcsv);

                    skp2 = skp2 + 1;
                    StateHasChanged();
                }

                names = await OlevelService.GetAllSqliteSifaNames(user.UserName);

                var personViewModelList = names.Select(p => new SifaNameModelView
                    {
                        Id = p.Id,
                        Fname = p.Fname,
                        Oname = p.Oname,
                        Sname = p.Sname,
                        Sex = p.Sex,
                        Dbirth = p.Dbirth,
                        ExamType = p.ExamType,
                        ExamName = p.ExamName,
                        ExamNumber = p.ExamNumber,
                        ExamYear = p.ExamYear,
                        SifaTable = p.SifaTable,
                        ExamType2 = p.ExamType2,
                        ExamName2 = p.ExamName2,
                        ExamNumber2 = p.ExamNumber2,
                        ExamYear2 = p.ExamYear2,
                        SifaTable2 = p.SifaTable2,
                        UserName = p.UserName,
                        EmisDB = p.EmisDB,
                        Selected = true
                    }).ToList();


                names2 = personViewModelList.AsQueryable();
                selectedItems2 = names2.Where(p => p.Selected);
                // foreach (var item in names)
                // {
                //     selectedItems.Add(item);
                // }
                TotalCandidate = selectedItems2.Count();
                // rows.Add(regiondisplay + "," + TotalCandidateRegion.ToString());
                StateHasChanged();
                #endregion

            }
            else
            {
                indetermin = false;
                _maxvalue = 1;
                Value = 1;
                _regpercent = Value * 100 / _maxvalue;
                StateHasChanged();
                snackBar.ShowError("No request of Names for update to Sifa (check status!)", 3000);
            }
        }

    }

    private async Task ListNameAsnyc()
    {
        if (datalists.Count != 0)
        {
            datalists.Clear();
        }
        List<SifaNameBackupModel> namesbk = new();
        namesbk = await OlevelService.GetAllSifaNamesBackup(user.UserName);

        foreach (var item in namesbk)
        {
            var dli = new DataListModel(Guid.NewGuid(), item.ExamNumber, item.ExamName + " - " + item.ExamYear.ToString());
            datalists.Add(dli);
        }
        dlistname = datalists.AsQueryable();
        StateHasChanged();

    }

    private async Task ListFeeAsnyc()
    {
        if (datalists.Count != 0)
        {
            datalists.Clear();
        }
        List<SifaFeeBackupModel> feebk = new();
        feebk = await OlevelService.GetAllSifaFeeBackup(user.UserName);

        foreach (var item in feebk)
        {
            var dli = new DataListModel(Guid.NewGuid(), item.ExamNumber, item.ExamName + " - " + item.ExamYear.ToString());
            datalists.Add(dli);
        }



        dlistfee = datalists.AsQueryable();
        StateHasChanged();

    }

    private async Task UpdateFeeAsnyc()
    {
        //selectedItems.Clear();

        if (names.Count() != 0)
        {
            names.Clear();
        }
        StateHasChanged();

        await InsertOption(transferOption, "Update Fee", _username);

        var p = await OlevelService.DeleteAllSifaName<SifaNameModel>();



        int TotalCandidateRegion = 0;
        int csvDataRowCount;
        int rowcount2;
        double stps2;
        int Steps2;
        int skp2;

        #region Particular
        try
        {
            TotalCandidateRegion = 0;
            _regpercent = 1 * 100 / 100;
            indetermin = true;
            isLoading = true;
            StateHasChanged();

            sifanamedata = await OlevelService.GetAllSifaNameFee(_username);

            TotalCandidateRegion = sifanamedata.Count();
            if (TotalCandidateRegion != 0)
            {
                csvDataRowCount = sifanamedata.Count;
                rowcount2 = csvDataRowCount;
                stps2 = csvDataRowCount / 1.00000;
                Steps2 = Convert.ToInt32(Math.Ceiling(Convert.ToDecimal(stps2)));
                skp2 = 0;
                regiondisplay = "Particular";
                StateHasChanged();
                indetermin = false;
                _maxvalue = Steps2;
                for (int i = 1; i <= Steps2; i++)
                {
                    var listcsv = sifanamedata.AsEnumerable().Skip(skp2).Take(1).ToList();
                    Value = i;
                    _regpercent = Value * 100 / _maxvalue;

                    await OlevelService.AddSifaNameAll(listcsv);

                    skp2 = skp2 + 1;
                    StateHasChanged();
                }
                names = await OlevelService.GetAllSqliteSifaNames(user.UserName);
                var personViewModelList = names.Select(p => new SifaNameModelView
                    {
                        Id = p.Id,
                        Fname = p.Fname,
                        Oname = p.Oname,
                        Sname = p.Sname,
                        Sex = p.Sex,
                        Dbirth = p.Dbirth,
                        ExamType = p.ExamType,
                        ExamName = p.ExamName,
                        ExamNumber = p.ExamNumber,
                        ExamYear = p.ExamYear,
                        SifaTable = p.SifaTable,
                        UserName = p.UserName,
                        EmisDB = p.EmisDB,
                        Selected = true
                    }).ToList();

                names3 = personViewModelList.AsQueryable();
                selectedItems3 = names3.Where(p => p.Selected);

                TotalCandidate = selectedItems3.Count();
                isLoading = false;
                StateHasChanged();
            }
            else
            {
                isLoading = false;
                indetermin = false;
                _maxvalue = 1;
                Value = 1;
                _regpercent = Value * 100 / _maxvalue;
                StateHasChanged();
                snackBar.ShowWarning("No request of Results from Fee payment (check status!)", 3000);
            }
        }
        catch (Exception exx)
        {
            snackBar.ShowError(exx.Message.ToString(), 4000);
        }
        #endregion
    }

    private async Task SubmitSelected()
    {
        rows.Clear();
        datalists.Clear();
        if (transferOption == "5") //For Update Candidates to Sifa after fee payments
        {
            if (selectedItems3.Count() != 0)
            {
                var p = OlevelService.DeleteAllSifaName<SifaNameModel>();
                var q = OlevelService.DeleteAllSifaFeeBackup<SifaFeeBackupModel>();
                var pp = OlevelService.DeleteAllParticular<ParticularModel>();
                var r = OlevelService.DeleteAllResult<ResultModel>();
                await Task.WhenAll(p, q, pp, r);

                var selectViewModelList3 = selectedItems3.Select(p => new SifaNameModel
                    {
                        Id = p.Id,
                        Fname = p.Fname,
                        Oname = p.Oname,
                        Sname = p.Sname,
                        Sex = p.Sex,
                        Dbirth = p.Dbirth,
                        ExamType = p.ExamType,
                        ExamName = p.ExamName,
                        ExamNumber = p.ExamNumber,
                        ExamYear = p.ExamYear,
                        SifaTable = p.SifaTable,
                        UserName = p.UserName,
                        EmisDB = p.EmisDB
                    }).ToList();

                await OlevelService.AddSifaNameAll(selectViewModelList3);

                foreach (var item in selectViewModelList3)
                {
                    try
                    {
                        _maxvalue = 100;
                        _regpercent = 1 * 100 / 100;
                        //indetermin = true;
                        StateHasChanged();
                        pdata = await OlevelService.GetParticularByCandnoFee(item.ExamNumber.Replace('-', '/'), user.UserName, item.EmisDB, item.ExamType);
                        int totalcand = pdata.Count();

                        if (totalcand != 0)
                        {
                            await OlevelService.AddParticularAll(pdata);

                            for (int i = 0; i < totalcand; i++)
                            {
                                _maxvalue = totalcand;
                                regiondisplay = pdata[i].SzCandidatesNumber.ToString();

                                var mycandresult = await OlevelService.GetResultByCandnoFee(pdata[i].SzCandidatesNumber, pdata[i].Etype, user.UserName, item.EmisDB);
                                // indetermin = false;
                                regiondisplay = "Results";

                                var rr = await OlevelService.AddResultAll(mycandresult);

                                Value = i + 1;
                                _regpercent = Value * 100 / totalcand;
                                rows.Add(regiondisplay + "," + pdata[i].Fname.ToString());
                                var dli4 = new DataListModel(Guid.NewGuid(), regiondisplay, pdata[i].Fname.ToString());
                                datalists.Add(dli4);
                                dlist = datalists.AsQueryable();
                                StateHasChanged();
                            }
                        }
                        await OlevelService.UpdateSifaNameStoreFee(item.ExamName, item.ExamNumber, item.ExamYear, user.UserName);
                        var ii = await OlevelService.InsertSifaFeeBackup(item.ExamName, item.ExamNumber, item.ExamYear, user.UserName);

                    }
                    catch (Exception exx)
                    {
                        snackBar.ShowError(exx.Message.ToString(), 4000);
                    }
                }
                ToastServiceNavigate.ShowToast("Navigating to destination page!", "Info", true, 8000, "/sifadestination");
                //snackBar.ShowSuccess("Navigating to destination page", 4000);
            }
            else
            {
                snackBar.ShowWarning("Please select atleast one name", 4000);
            }
        }
        else
        {
            if (selectedItems2.Count() != 0)
            {
                var p = await OlevelService.DeleteAllSifaName<SifaNameModel>();
                var q = await OlevelService.DeleteAllSifaNameBackup<SifaNameBackupModel>();
                var selectViewModelList2 = selectedItems2.Select(p => new SifaNameModel
                    {
                        Id = p.Id,
                        Fname = p.Fname,
                        Oname = p.Oname,
                        Sname = p.Sname,
                        Sex = p.Sex,
                        Dbirth = p.Dbirth,
                        ExamType = p.ExamType,
                        ExamName = p.ExamName,
                        ExamNumber = p.ExamNumber,
                        ExamYear = p.ExamYear,
                        SifaTable = p.SifaTable,
                        ExamType2 = p.ExamType2,
                        ExamName2 = p.ExamName2,
                        ExamNumber2 = p.ExamNumber2,
                        ExamYear2 = p.ExamYear2,
                        SifaTable2 = p.SifaTable2,
                        UserName = p.UserName,
                        EmisDB = p.EmisDB
                    }).ToList();

                await OlevelService.AddSifaNameAll(selectViewModelList2);

                var p3 = await OlevelService.DeleteAllSifaName3(selectViewModelList2);

                foreach (var item in selectViewModelList2)
                {
                    await OlevelService.UpdateSifaNameStore(item.ExamName, item.ExamNumber, item.ExamYear, user.UserName);
                    var ii = await OlevelService.InsertSifaNameBackup(item.ExamName, item.ExamNumber, item.ExamYear, user.UserName);

                }
                ToastServiceNavigate.ShowToast("Navigating to destination page!", "Info", true, 8000, "/sifadestination");
                //snackBar.ShowSuccess("Navigating to destination page", 4000);
            }
            else
            {
                snackBar.ShowWarning("Please select atleast one name", 4000);
            }
        }
    }
}