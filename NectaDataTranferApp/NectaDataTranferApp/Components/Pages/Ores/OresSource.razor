@page "/oressource"
@page "/source"
@using System.Security
@using NectaDataTranferApp.Components.ComponetServer
@using NectaDataTranferApp.Services
@using NectaDataTransfer.Shared.Models.CA

@inject NavigationManager NavManager
@inject IMysqlService MysqlService
@inject ICsvService CsvService
@inject IConnectionService ConnectionService
@inject IDialogService _dialogService
@inject SessionService sessionservice
@inject ITransferOption TransferOptionService;
@inject IToastService ToastService
@inject ToastServiceNavigate ToastServiceNavigate
<FluentToastProvider />
<FluentDialogProvider />
@rendermode @(new InteractiveServerRenderMode(prerender:false))
@if (user1 != null)
{
    <FluentCard Class="mt-10" Style="height:100%">
        <ToastNavigateComp /> <!-- Include the Toast component here -->
        <FluentLabel> Source From Online</FluentLabel>
        <FluentGrid>
            <FluentStack VerticalGap="20" VerticalAlignment="VerticalAlignment.Center" Orientation="Orientation.Vertical">
                <FluentStack VerticalGap="20" VerticalAlignment="VerticalAlignment.Center" Orientation="Orientation.Vertical">
                    <FluentGridItem xs="12" sm="6" md="12" Style="margin-top:20px">
                        @if (mysqldatabases != null)
                        {
                            <FluentCombobox Autocomplete="ComboboxAutocomplete.Both" Id="cmbsourcedb" @bind-Value="@datasourceDB" @onchange="UpdateConnection" TOption="string" Label="Source Database">
                                @foreach (var dblist in mysqldatabases)
                                {
                                    <FluentOption Value="@dblist.MysqlDatabase">@dblist.MysqlDatabase</FluentOption>
                                }
                            </FluentCombobox>
                        }

                    </FluentGridItem>
                </FluentStack>
                <FluentGridItem Class="mt-4" xs="12" sm="6" md="12">

                    <FluentCombobox TOption="string" @bind-SelectedValue="_classidstring" @onchange="OnCloseClass" Label="Class">
                        @foreach (var clist in classes)
                        {
                            <FluentOption Text="@clist.ClassName" Value="@clist.ClassId.ToString()">@clist.ClassName</FluentOption>
                        }
                    </FluentCombobox>


                </FluentGridItem>
                @*  <FluentGridItem Class="mt-4" xs="12" sm="6" md="12">
            <FluentButton Size="Size.Small" @onclick="@Desti" IconEnd="@(new Icons.Regular.Size16.ArrowCircleDown())">Move</FluentButton>
            </FluentGridItem> *@
                <FluentGridItem>
                    <FluentLabel>Transfer Option</FluentLabel>
                    <FluentRadioGroup Style="margin-top:10px; width:235%; border: 1px solid var(--accent-fill-rest)" @bind-Value="@transferOption">
                        <FluentRadio Value="@("1")">First Insert</FluentRadio>
                        <FluentRadio Checked="true" Value="@("2")">Update</FluentRadio>
                        @*    <MudRadio Class="ml-6" Size="Size.Small" Dense="true" Option="@("2")" Color="Color.Success" UnCheckedColor="Color.Default">Update</MudRadio> *@
                        @*  <MudRadio Class="ml-6" Size="Size.Small" Dense="true" Option="@("3")" Color="Color.Success" UnCheckedColor="Color.Default">Changed Names</MudRadio> *@
                    </FluentRadioGroup>
                </FluentGridItem>
                <FluentGridItem>
                    <FluentSwitch Disabled="true" @bind-Value=_regstatus CheckedMessage=@_regcomment UncheckedMessage="Closed">Registration Status</FluentSwitch>
                </FluentGridItem>
                <FluentGridItem>
                    <div style="display: flex; align-items: end; width: 100%;">
                        <div style="display: flex;  width: 50%;" class="btn_wrapper" />
                        <div style="display: flex; align-items: flex-end; width: 50%;">

                            <FluentButton @onclick="GetReg" 
                                          Appearance="Appearance.Accent">
                                @if (@transferOption == "1")
                                {
                                    <FluentLabel Color="Color.Fill">Get Bulk Data</FluentLabel>
                                }
                                else
                                {
                                    <FluentLabel Color="Color.Fill">Get Update Data</FluentLabel>

                                }
                              
                            </FluentButton>
                        </div>
                    </div>
                </FluentGridItem>
            </FluentStack>
        </FluentGrid>
        <FluentGrid>
            <FluentStack VerticalGap="20" VerticalAlignment="VerticalAlignment.Center" Orientation="Orientation.Vertical">
                @if (@transferOption == "1")
                {
                    <FluentGridItem>

                        <div style="display: flex; align-items: center;">

                            @*      <FluentGridItem Justify="JustifyContent.FlexStart" hidden="@regionmenuhiden"  xs="12" sm="6" > *@
                            <FluentProgress Style="width: 300px; flex: 1; margin-right: 10px;" Stroke="ProgressStroke.Large" Value="@(indetermin ? null :@Valueregion)" Max="@_maxvalueregion">

                            </FluentProgress>


                            @*    </FluentGridItem> *@

                            <FluentLabel Color="Color.Error" Style="width: 80px;"><b>@_regpercentregion%</b></FluentLabel>

                        </div>

                    </FluentGridItem>


                    <FluentGridItem hidden=@regionmenuhiden Class="mt-2" xs="12" sm="6" md="12">

                        @if (_regpercentregion == 100)
                        {
                            <FluentLabel>Total imported:  @TotalData  @regorschool  </FluentLabel>
                        }
                        else
                        {
                            <FluentLabel>Data Imported : @regiondisplay </FluentLabel>
                        }
                    </FluentGridItem>
                }
                <FluentGridItem hidden=@regionmenuhiden Class="mt-8" xs="12" sm="6" md="12">
                    <div style="display: flex; align-items: center;">
                        <FluentProgress Style="width: 300px; flex: 1; margin-right: 10px;" Color="Color.Info" Value="@(indetermin ? null :@Value)" Max="@_maxvalue" Stroke="ProgressStroke.Large">

                        </FluentProgress>
                        <FluentLabel Color="Color.Accent">
                            <b>@_regpercent%</b>
                        </FluentLabel>
                    </div>
                </FluentGridItem>

                <FluentGridItem Class="mt-2" xs="12" sm="6" md="12">

                    @if (_regpercent == 100)
                    {
                        <FluentLabel>Total Candidate imported  @TotalCandidate  from  @TotalData  @regorschool  </FluentLabel>
                    }
                    else
                    {
                        <FluentLabel>Data Imported : @displaydetail </FluentLabel>
                    }
                </FluentGridItem>
                <FluentGridItem Class="mt-2" xs="12" sm="6" md="12">

                    <div style="height: 200px;width:600px; margin-top:15px; overflow:auto; scroll;">
                        <FluentDataGrid Loading="@isVisible" Items="@dlist" Style="height=100%;width:100%;" ResizableColumns=true>
                            <PropertyColumn Width="40%" Property="@(p=>p.Data)" Sortable="true" />
                            <PropertyColumn Title="Candidates" Width="30%" Property="@(p=>p.Records)" Sortable="false" />
                            @if (@isSecondary)
                            {
                            <PropertyColumn  Width="30%" Property="@(p=>p.SubjectCount)" Sortable="false" />
                            }
                        </FluentDataGrid>
                    </div>

                </FluentGridItem>
            </FluentStack>
        </FluentGrid>
    </FluentCard>

}
else
{
    <FluentTextArea Class="mt-4">@loginmesseage</FluentTextArea>
}

@code {
    [Parameter]
    public int id { get; set; }
    bool ishidden = true;
    private string datasource = "MySql";
    [Parameter]
    public string classname { get; set; }
    private int _classid;
    private string _classidstring;
    private string datasourceDB = "";
    private int _port = 3306;
    private int _maxvalue;
    private string regiondisplay;
    private string _host = "";  //"192.168.20.21";
    private string _username = "";
    private string _pwd = "";//"coder2019";
    private int _connId;
    private string _connectionName;
    private string _connectionString;
    MysqlModel model = new MysqlModel();
    private List<MysqlDatabaseModel> mysqldatabases = new();
    private List<RegionModel> regions = new();
    private List<CsvModel> csvdata = new();
    private List<ClassModel> classes = new();
    private List<CsvModelSchool> csvdataschool = new();
    private string pconnstrMysql = string.Empty;
    public string transferOption { get; set; } = "1";
    public int Value { get; set; }
    public int _regpercent { get; set; }
    private List<SchoolModel> schools = new();
    private int TotalCandidate;
    private int TotalData;
    string[] headings = { "Data", "Cadidates", "SubjectCount" };
    record DataListModel(Guid Id, string Data, string Records,string SubjectCount);
    private IQueryable<DataListModel>? dlist;
    private List<DataListModel> datalists = new();
    private List<CsvModelSubject> csvdatasubject = new();
    private List<CAModelSubject> csvdatasubjectCA = new();
    private List<SifaExamModel> csvdatasifa = new();
    private bool regionmenuhiden = true;
    private string regorschool;
    List<String> rows = new List<String>();
    private string displaydetail;
    private MysqlModel ModelToEdit = new();
    int querryid;
    bool indetermin = false;
    public int _regpercentregion { get; set; }
    private bool hiddenTbrList = false;
    private bool hiddenTbrName = true;
    string _errorMessage;
    string loginmesseage = "";
    private UserDto user1;
    public int Valueregion { get; set; }
    private int _maxvalueregion;
    Option<string> selectedStringOption = default!;
    IQueryable listOppLineData = Enumerable.Empty<string>().AsQueryable();
    private bool isVisible = false;
    bool _regstatus = false;
    bool isSecondary = false;
    string _regcomment = "";

    protected override async Task OnInitializedAsync()
    {
        await GetSessionUser();
        if (user1 != null)
        {
            await GetSourceDatabase(user1.UserName);
            ishidden = false;
            StateHasChanged();
        }
        else
        {
            loginmesseage = "Your not Login,Please use Login botton at right side";
        }

    }
   
    private async Task GetSessionUser()
    {
        user1 = await sessionservice.GetUserSession("user1");
    }

    private async ValueTask GetConnectionId(string conntype, string username)
    {
        var conModelList = await ConnectionService.GetConnectionByNameUsername(conntype, username);
        var query2 = from element in conModelList
                     where element.Name == conntype && element.Username == username
                     select element.Id;
        _connId = query2.FirstOrDefault();
    }

    private async ValueTask GetSourceDatabase(string uname)
    {
        mysqldatabases = await MysqlService.GetMysqlDatabases(uname);

        var query2 = from element in mysqldatabases
                     where element.MysqlDatabase != ""
                     select element.MysqlDatabase;

        datasourceDB = query2.FirstOrDefault();
        StateHasChanged();
    }

    private async Task UpdateConnection(ChangeEventArgs e)
    {
        string newValue = e.Value?.ToString();
        datasourceDB = newValue;
        StateHasChanged();
        _username = user1.UserName;

        var conModelList = await ConnectionService.GetConnectionByNameUsername("mysql", _username);
        if (conModelList.Count() != 0)
        {
            foreach (var item in conModelList)
            {
                _pwd = Setting.DecryptionMe(item.Pwd);
                _host = item.Host;
                _port = item.Port;

            }
        }
        else
        {
            snackBar.ShowWarning("Please Logout and Login again!", 2000);
            return;
        }

        pconnstrMysql = "Server=" + _host + ";" + "Port=" + _port + ";" + "Database=" + datasourceDB + ";" + "UserId=" + _username + ";" + "Password=" + _pwd + ";Charset=latin1;allowLoadLocalInfile=true;ConnectionTimeout = 80000;SslMode=none;Allow User Variables=True;";

        if (OpenConnMysql(pconnstrMysql))
        {
            int response = -1;
            _connId = 0;
            _connectionName = "mysql";
            _connectionString = pconnstrMysql;

            // To check if Sqlite has connection string
            await GetConnectionId(_connectionName, _username);

            ConnectionModel conMod = new()
                {
                    Id = _connId,
                    Name = _connectionName,
                    ConnectionString = Setting.EncryptionMe(_connectionString),
                    Username = _username,
                    Host = _host,
                    Pwd = Setting.EncryptionMe(_pwd),
                    Port = _port
                };

            if (_connId > 0)
            {
                //Update Connection string
                response = await ConnectionService.UpdateConnection(conMod);
            }
            else
            {
                response = await ConnectionService.AddConnection(conMod);

            }
            await GetClassesFromMysql(_username);
            StateHasChanged();
        }
        else
        {
            return;
        }
    }

    private async Task InsertOption(string toption, string toptionname, string uname)
    {
        try
        {
            var delopt = await TransferOptionService.DeleteAllOption<TransferOptionModel>(uname);
        }
        catch (Exception)
        {

        }
        var optModel = new TransferOptionModel
            {
                TransferOption = toption,
                TransferOptionName = toptionname,
                Username = uname
            };
        await TransferOptionService.AddOption(optModel);
    }

    private async void GetReg()
    {
        rows.Clear();
        datalists.Clear();

        _username = user1.UserName;
        if (datasourceDB != "")
        {
            StateHasChanged();
            regionmenuhiden = false;
            regorschool = "Regions";
            int csvDataRowCount;
            int rowcount2;
            double stps2;
            int Steps2;
            int skp2;
            try
            {
                regions = await CsvService.GetRegions(_username);
                StateHasChanged();
            }
            catch (MySqlException ex)
            {
                snackBar.ShowError(ex.Message.ToString(), 4000);
                return;
            }

            if (regions.Count() == 0)
            {
                snackBar.ShowWarning("Make sure Regions(vwregion) exist in this Database", 4000);
                return;
            }

            if (transferOption == "1" || transferOption == "3")  // Bulk Insert
            {
                await InsertOption(transferOption, "First Insert", _username);

                try
                {
                    var cand = CsvService.DeleteAllCsv<CsvModel>();
                    var subj = CsvService.DeleteAllCsvSubject<CsvModelSubject>();
                    var subjCA = CsvService.DeleteAllCsvSubjectCA<CAModelSubject>();
                    var scho = CsvService.DeleteAllCsvSchool<CsvModelSchool>();
                    var sif = CsvService.DeleteAllCsvSifa<SifaExamModel>();
                    await Task.WhenAll(cand, subj, scho, sif,subjCA);
                }
                catch (Exception)
                {

                }
                var updateclassid = CsvService.UpdateClassId(_classid, _username);

                TotalCandidate = 0;
                TotalData = 0;
                int TotalCandidateRegion;
                int totalSubject;
                _regpercent = 1 * 100 / 100;
                indetermin = true;
                isVisible = true;
                StateHasChanged();
                try
                {
                    for (int i = 0; i < regions.Count; i++)
                    {
                        TotalCandidateRegion = 0;
                        totalSubject = 0;
                        querryid = 1;

                        csvdata = await CsvService.GetCsvDataMysql(_classid, "0", regions[i].RegionCode, querryid, _username);
                        regiondisplay = string.Format("Get Candidate of Region {0}", regions[i].RegionName);
                        StateHasChanged();
                        TotalCandidateRegion = csvdata.Count();
                        TotalCandidate += TotalCandidateRegion;
                        if (TotalCandidateRegion != 0)
                        {
                            TotalData += 1;
                            csvDataRowCount = TotalCandidateRegion;
                            rowcount2 = csvDataRowCount;
                            stps2 = csvDataRowCount / 10000.00000;
                            Steps2 = Convert.ToInt32(Math.Ceiling(Convert.ToDecimal(stps2)));
                            skp2 = 0;
                            for (int j = 1; j <= Steps2; j++)
                            {

                                var listcsv = csvdata.AsEnumerable().Skip(skp2).Take(10000).ToList();

                                await CsvService.AddCsvAll(listcsv);

                                skp2 = skp2 + 10000;

                            }

                            regiondisplay = string.Format("Get Subjects of Region {0}", regions[i].RegionName);
                            StateHasChanged();

                            var schoolsCsv = await CsvService.GetAllSchoolDestiRegion(regions[i].RegionCode);

                            querryid = 2;

                            int schoolcount = schoolsCsv.Count();

                            // Insert per Region
                            for (int s = 0; s < schoolcount; s++)
                            {
                                displaydetail = schoolsCsv[s].SchoolCode.ToString();

                                // For PReMs 
                                if (user1.MenuKey == "2" )
                                {
                                    if ( _classid>4) //for ACSEE TO GET COMBI SUBJECT
                                    {
                                        csvdatasubject = await CsvService.GetCsvDataMysqlSubject(_classid, schoolsCsv[s].SchoolCode, regions[i].RegionCode, 6, _username);
                                        csvdatasubjectCA = await CsvService.GetCsvDataMysqlSubjectCA(_classid, schoolsCsv[s].SchoolCode, regions[i].RegionCode, 7, _username);
                                        csvdatasifa = await CsvService.GetCsvDataMysqlSifa(_classid, schoolsCsv[s].SchoolCode, regions[i].RegionCode, 3, _username);
                                        totalSubject = csvdatasubject.Count();
                                        isSecondary = true;
                                    }
                                    else if (_classid == 2) //for FTNA no CA and sifa has been include on candidate as pslenumber and psleyear
                                    {
                                        csvdatasubject = await CsvService.GetCsvDataMysqlSubject(_classid, schoolsCsv[s].SchoolCode, regions[i].RegionCode, querryid, _username);
                                        //csvdatasubjectCA = await CsvService.GetCsvDataMysqlSubjectCA(_classid, schoolsCsv[s].SchoolCode, regions[i].RegionCode, 7, _username);
                                        //csvdatasifa = await CsvService.GetCsvDataMysqlSifa(_classid, schoolsCsv[s].SchoolCode, regions[i].RegionCode, 3, _username);
                                        totalSubject = csvdatasubject.Count();
                                        isSecondary = true;
                                    }
                                    else
                                    {
                                        csvdatasubject = await CsvService.GetCsvDataMysqlSubject(_classid, schoolsCsv[s].SchoolCode, regions[i].RegionCode, querryid, _username);
                                        csvdatasubjectCA = await CsvService.GetCsvDataMysqlSubjectCA(_classid, schoolsCsv[s].SchoolCode, regions[i].RegionCode, 7, _username);
                                        csvdatasifa = await CsvService.GetCsvDataMysqlSifa(_classid, schoolsCsv[s].SchoolCode, regions[i].RegionCode, 3, _username);
                                        totalSubject = csvdatasubject.Count();
                                        isSecondary = true;
                                    }
                                }
                                //Fro Online Registration
                                if (user1.MenuKey == "6")
                                {
                                    csvdatasubject = await CsvService.GetCsvDataMysqlSubject(_classid, schoolsCsv[s].SchoolCode, regions[i].RegionCode, querryid, _username);
                                    csvdatasifa = await CsvService.GetCsvDataMysqlSifa(_classid, schoolsCsv[s].SchoolCode, regions[i].RegionCode, 3, _username);
                                    totalSubject = csvdatasubject.Count();
                                    isSecondary = true;

                                }


                                csvdataschool = await CsvService.GetCsvDataMysqlSchool(_classid, schoolsCsv[s].SchoolCode, "0", 4, _username);

                                var ss = CsvService.AddCsvAllSubject(csvdatasubject);
                                var ssCA = CsvService.AddCsvAllSubjectCA(csvdatasubjectCA);
                                var si = CsvService.AddCsvAllSifa(csvdatasifa);
                                var shule = CsvService.AddCsvAllSchool(csvdataschool);

                                await Task.WhenAll(ss, si, shule,ssCA);
                                _maxvalue = schoolcount;
                                Value = s + 1;
                                _regpercent = Value * 100 / schoolcount;
                                StateHasChanged();

                            }
                            // For online registration
                            if (user1.MenuKey == "6")
                            {
                                if (_classid == 2)
                                {
                                    var updateCandNumber = CsvService.UpdateCandidateNumber(500, _username);
                                    var updateCandNumberSifa = await CsvService.UpdateCandNumberSifaTable();
                                    var updateCandNumberSubject = await CsvService.UpdateCandNumberSubjectTable();
                                }
                                else
                                {
                                    var updateCandNumber = await CsvService.UpdateCandidateNumber(0, _username);
                                    var updateCandNumberSifa = await CsvService.UpdateCandNumberSifaTable();
                                    var updateCandNumberSubject = await CsvService.UpdateCandNumberSubjectTable();

                                }
                            }

                        }
                        // to reset percentage if there is no region has data
                        if (TotalData == 0)
                        {
                            _regpercent = 0;
                        }

                        _maxvalueregion = regions.Count;
                        Valueregion = i + 1;
                        _regpercentregion = Valueregion * 100 / regions.Count;

                        rows.Add(regions[i].RegionName + "," + TotalCandidateRegion.ToString());

                        var dli = new DataListModel(Guid.NewGuid(), regions[i].RegionName, TotalCandidateRegion.ToString(),totalSubject.ToString());
                        datalists.Add(dli);
                        dlist = datalists.AsQueryable();
                        isVisible = false;
                        StateHasChanged();
                    }
                }
                catch (Exception ex)
                {
                    snackBar.ShowError(ex.Message.ToString(), 10000);
                }
                if (rows.Count == 0)
                {
                    snackBar.ShowWarning("No candidate for transfer to Emis", 8000);

                    return;
                }
                else
                {
                    indetermin = false;
                    StateHasChanged();
                    ToastServiceNavigate.ShowToast("Navigating to destination page!", "Info", true, 8000, "/oresemis");
                }
            }
            else
            {
                await UpdateAsnyc();
            }

        }
        else
        {
            snackBar.ShowError("Please,Select database or check if registration has been closed before transfer!", 8000);
        }

    }
  
    void ShowDestination()
    {
        //  snackBar.ShowSuccess("Success confirmation with action.", null, "Action", (this,()=>Desti));

        snackBar.ShowCommunicationToast(new ToastParameters<CommunicationToastContent>()
            {
                Intent = ToastIntent.Success,
                Title = "Data retrival completed!",
                Timeout = 8000,
                PrimaryAction = "Open",

                OnPrimaryAction = EventCallback.Factory.Create<ToastResult>(this, () => NavManager.NavigateTo("/oresemis")),
                Content = new CommunicationToastContent()
                {
                    Subtitle = " Open Emis Destination",
                    Details = "Let This App help you export your data to EMIS database.",
                },
            });

        // ToastService.ShowToast(ToastIntent.Info, "Click to navigate", 8000, "Navigate", EventCallback.Factory.Create<ToastResult>(this, Disti);
    }

    public void Desti()
    {
        NavManager.NavigateTo("/oresemis");
    }

    bool OpenConnMysql(string conn)
    {
        MySqlConnection connection = new MySqlConnection(conn);

        try
        {
            connection.Open();
            return true;

        }
        catch (MySqlException ex)
        {
            int number;
            if (ex.InnerException != null && ex.InnerException is MySqlException)
            {
                number = ((MySqlException)ex.InnerException).Number;
            }
            else
            {
                number = ex.Number;
            }

            switch (number)
            {

                case 0:
                    snackBar.ShowError("Cannot connect to server.Contact administrator", 10000);
                    break;

                case 1045:
                    snackBar.ShowError("Invalid username/password,please try again", 10000);
                    break;
                case 1042:
                    snackBar.ShowError("Invalid host/port number,please try again", 10000);
                    break;
                case 1049:
                    snackBar.ShowError("Invalid Database,please try again", 10000);
                    break;
            }

            return false;
        }
    }

    private async Task InSchoolsForUpdate()
    {

        try
        {
            await CsvService.DeleteAllSchool<SchoolModel>();
        }
        catch (Exception)
        {

        }

        foreach (var myclasses in classes)
        {
            var claModel = new ClassModel
                {
                    ClassId = myclasses.ClassId,
                    ClassName = myclasses.ClassName,
                    Username = _username

                };
            await CsvService.AddClass(claModel);

        }
    }
    public record NameAndAge
    {
        public int Id { get; set; }
        public string? myUsername { get; set; }

    }

    private async Task UpdateAsnyc()
    {
        NameAndAge DialogData = new() { Id = 1, myUsername = user1.UserName };
        var data = DialogData with { Id = 1 };
        regorschool = "Schools";
        rows.Clear();
        datalists.Clear();
        _username = user1.UserName;
        // var parameters = new DialogParameters();
        // parameters.Add("username", _username);
        var dialog = await _dialogService.ShowDialogAsync<UpdateDialog>(data, new DialogParameters()
            {
                Height = "440px",
                Title = "Centre list for Update",
                PreventDismissOnOverlayClick = true,
                PreventScroll = false,
            });
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var updateclassid = CsvService.UpdateClassId(_classid, _username);
            isVisible = true;
            indetermin = true;
            StateHasChanged();
            try
            {
                var cand = CsvService.DeleteAllCsv<CsvModel>();
                var subj = CsvService.DeleteAllCsvSubject<CsvModelSubject>();
                var subjCA = CsvService.DeleteAllCsvSubjectCA<CAModelSubject>();
                var scho = CsvService.DeleteAllCsvSchool<CsvModelSchool>();
                var sif = CsvService.DeleteAllCsvSifa<SifaExamModel>();
                await Task.WhenAll(cand, subj, scho, sif,subjCA);
            }
            catch (Exception)
            {

            }
            // This for show update option
            await InsertOption(transferOption, "Update", _username);
            schools = await CsvService.GetAllSchool();

            TotalCandidate = 0;
            TotalData = 0;
            int TotalCandidateRegion;
            int totalSubject;
            querryid = 1;
            for (int i = 0; i < schools.Count; i++)
            {
                TotalCandidateRegion = 0;
                totalSubject = 0;

                csvdata = await CsvService.GetCsvDataMysql(_classid, schools[i].SchoolCode, "0", querryid, _username);
                csvdataschool = await CsvService.GetCsvDataMysqlSchool(_classid, schools[i].SchoolCode, "0", 4, _username);

                // Get subject and sifa if ACSEE OR CSEE
                // For PReMs 
                if (user1.MenuKey == "2" )
                {
                    if ( _classid > 4) //for ACSEE TO GET COMBI SUBJECT
                    {
                        csvdatasubject = await CsvService.GetCsvDataMysqlSubject(_classid, schools[i].SchoolCode, "0", 6, _username);
                        csvdatasubjectCA = await CsvService.GetCsvDataMysqlSubjectCA(_classid, schools[i].SchoolCode, "0", 7, _username);
                        csvdatasifa = await CsvService.GetCsvDataMysqlSifa(_classid, schools[i].SchoolCode, "0", 3, _username);
                        totalSubject = csvdatasubject.Count();
                        isSecondary = true;
                    }
                    else if (_classid ==2) //for FTNA no CA and sifa has been include on candidate as pslenumber and psleyear
                    {
                        csvdatasubject = await CsvService.GetCsvDataMysqlSubject(_classid, schools[i].SchoolCode, "0", 6, _username);
                        //csvdatasubjectCA = await CsvService.GetCsvDataMysqlSubjectCA(_classid, schools[i].SchoolCode, "0", 7, _username);
                        //csvdatasifa = await CsvService.GetCsvDataMysqlSifa(_classid, schools[i].SchoolCode, "0", 3, _username);
                        totalSubject = csvdatasubject.Count();
                        isSecondary = true;
                    }

                    else
                    {
                        csvdatasubject = await CsvService.GetCsvDataMysqlSubject(_classid, schools[i].SchoolCode, "0", 2, _username);
                        csvdatasubjectCA = await CsvService.GetCsvDataMysqlSubjectCA(_classid, schools[i].SchoolCode, "0", 7, _username);
                        csvdatasifa = await CsvService.GetCsvDataMysqlSifa(_classid, schools[i].SchoolCode, "0", 3, _username);
                        totalSubject = csvdatasubject.Count();
                        isSecondary = true;
                    }
                }
                // For Online Reg
                if ( user1.MenuKey == "6")
                {
                    csvdatasubject = await CsvService.GetCsvDataMysqlSubject(_classid, schools[i].SchoolCode, "0", 2, _username);
                    csvdatasifa = await CsvService.GetCsvDataMysqlSifa(_classid, schools[i].SchoolCode, "0", 3, _username);
                    totalSubject = csvdatasubject.Count();
                    isSecondary = true;
                }
              
                regiondisplay = schools[i].SchoolCode + " " + schools[i].SchoolName;
                _maxvalue = schools.Count;
                TotalCandidateRegion = csvdata.Count();
                TotalCandidate += TotalCandidateRegion;
                if (TotalCandidateRegion != 0)
                {
                    TotalData += 1;
                }
                Value = i + 1;
                _regpercent = Value * 100 / schools.Count;

                rows.Add(regiondisplay + "," + TotalCandidateRegion.ToString());
                var dli4 = new DataListModel(Guid.NewGuid(), regiondisplay, TotalCandidateRegion.ToString(), totalSubject.ToString());
                datalists.Add(dli4);
                dlist = datalists.AsQueryable();
                
                var canddata= CsvService.AddCsvAll(csvdata);
                var shule = CsvService.AddCsvAllSchool(csvdataschool);
                var ss = CsvService.AddCsvAllSubject(csvdatasubject);
                var ssCA = CsvService.AddCsvAllSubjectCA(csvdatasubjectCA);
                var si = CsvService.AddCsvAllSifa(csvdatasifa);

                await Task.WhenAll(canddata, shule,ss,si,ssCA);

                isVisible = false;
                StateHasChanged();
            }
            if (user1.MenuKey == "6")
            {
                if (_classid == 2)
                {
                    var updateCandNumber = CsvService.UpdateCandidateNumber(500, _username);
                    var updateCandNumberSifa = await CsvService.UpdateCandNumberSifaTable();
                    var updateCandNumberSubject = await CsvService.UpdateCandNumberSubjectTable();
                }
                else
                {
                    var updateCandNumber = await CsvService.UpdateCandidateNumber(0, _username);
                    var updateCandNumberSifa = await CsvService.UpdateCandNumberSifaTable();
                    var updateCandNumberSubject = await CsvService.UpdateCandNumberSubjectTable();

                }
            }
            indetermin = false;
            StateHasChanged();

            ToastServiceNavigate.ShowToast("Navigating to destination page!", "Info", true, 8000, "/emis");
        }
    }
    private async ValueTask GetClassesFromMysql(string uname)
    {
        //GET CLASSES FROM MYSQL AND DELETE FROM SQLITE BEFORE ADD  IT
        try
        {
            classes = await CsvService.GetClasses(uname);
        }
        catch (Exception ex)
        {

            snackBar.ShowError(ex.Message.ToString(), 4000);
            return;
        }
        var query3 = from element in classes
                     select element.ClassId;
        _classid = query3.FirstOrDefault();
        StateHasChanged();

        try
        {
            await CsvService.DeleteAllClass<ClassModel>();
        }
        catch (Exception)
        {

        }
        foreach (var myclasses in classes)
        {
            var claModel = new ClassModel
                {
                    ClassId = myclasses.ClassId,
                    ClassName = myclasses.ClassName,
                    Username = _username
                };
            await CsvService.AddClass(claModel);
        }
    }

    private async Task GetClassName(int cllId)
    {
        string ccname = "";
        try
        {
            classes = await CsvService.GetClasses(_username);
        }
        catch (Exception ex)
        {
            snackBar.ShowError(ex.Message.ToString(), 4000);
            return;
        }
        var query3 = from element in classes
                     where element.ClassId == cllId
                     select element.ClassName;
        classname = query3.FirstOrDefault();
        ccname = classname;

    }
    private async Task OnCloseClass(ChangeEventArgs e)
    {
        // Your asynchronous code here
        // StateHasChanged();
        string newValue = e.Value?.ToString();
        // Retrieve the class id from class name
        var selectedClass = classes.FirstOrDefault(c => c.ClassName.ToString() == newValue);
        if (selectedClass != null)
        {
            _classid = selectedClass.ClassId;
            // Now you have the class name, do whatever you need with it
        }

        //  //   _classid = Convert.ToInt32(newValue);
        // StateHasChanged();
        await GetClassName(_classid);
        await RegistrationStatus(_classid);
        StateHasChanged();

    }
    private async Task RegistrationStatus(int cllId)
    {
        List<RegStatusModel> res = new();
        bool regstatus = false;
        string opn = "Open";
        try
        {
            res = await CsvService.GetRegistrationStatus(cllId, _username); ;
        }
        catch (Exception ex)
        {

            return;
        }
        if (res.Count != 0)
        {
            var query3 = (from element in res
                          select new { element.RegStatus, element.Comments });

            _regcomment = string.Format("{0} : {1} ", opn, query3.FirstOrDefault().Comments);
            _regstatus = true;
        }
        else
        {
            _regstatus = regstatus;
        }
    }

}