@page "/weather"
<FluentToastProvider />
@* @attribute [StreamRendering] *@
@rendermode @(new InteractiveServerRenderMode(prerender:false))
@inject IToastService ToastService
<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <!-- This page is rendered in SSR mode, so the FluentDataGrid component does not offer any interactivity (like sorting). -->
    <FluentDataGrid Id="weathergrid" Items="@forecasts" GridTemplateColumns="1fr 1fr 1fr 2fr" TGridItem="WeatherForecast">
        <PropertyColumn Title="Date" Property="@(c => c!.Date)" Align="Align.Start"/>
        <PropertyColumn Title="Temp. (C)" Property="@(c => c!.TemperatureC)" Align="Align.Center"/>
        <PropertyColumn Title="Temp. (F)" Property="@(c => c!.TemperatureF)" Align="Align.Center"/>
        <PropertyColumn Title="Summary" Property="@(c => c!.Summary)" Align="Align.End"/>
    </FluentDataGrid>
}

<FluentButton @onclick="@ShowToast" Appearance="Appearance.Accent">Open</FluentButton>

<FluentCombobox Id="combobox-with-inline-autocomplete" Autocomplete="ComboboxAutocomplete.Inline" @bind-Value="@comboboxValue" TOption="string">
    <FluentOption>William Hartnell</FluentOption>
    <FluentOption>Patrick Troughton</FluentOption>
    <FluentOption>Jon Pertwee</FluentOption>
    <FluentOption>Tom Baker</FluentOption>
    <FluentOption>Peter Davidson</FluentOption>
    <FluentOption>Colin Baker</FluentOption>
    <FluentOption>Sylvester McCoy</FluentOption>
    <FluentOption>Paul McGann</FluentOption>
    <FluentOption>Christopher Eccleston</FluentOption>
    <FluentOption>David Tenant</FluentOption>
    <FluentOption>Matt Smith</FluentOption>
    <FluentOption>Peter Capaldi</FluentOption>
    <FluentOption>Jodie Whittaker</FluentOption>
</FluentCombobox>

@code {
    string? comboboxValue = "";
    private IQueryable<WeatherForecast>? forecasts;
    int counter = 1;
    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).AsQueryable();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
    void ShowToast()
    {
        Random rnd = new();

        var intent = Enum.GetValues<ToastIntent>()[rnd.Next(10)];
        var message = $"Simple Toast #{counter++}";
        ToastService.ShowToast(intent, message);
    }
}
