@using NectaDataTransfer.Shared.Models
@using Icons = Microsoft.FluentUI.AspNetCore.Components.Icons
<EditForm Model="@model2" OnValidSubmit="@HandleValidSubmit" id="MySqlfomu">
    <DataAnnotationsValidator />
   <FluentCard Class="demo-form">
        <FluentStack Orientation="Orientation.Vertical" VerticalGap="2">
            <FluentTextField Id="txtserver"  Label="Mysq Server / IP address" @bind-Value="@_host2" For="@(() => model2.Host)" />
            <FluentNumberField Id="nmbport" Class="mt-2" Label="Port" @bind-Value="@_port2" For="@(() => model2.Port)" />
            <FluentTextField Id="txtuser" Class="mt-2" Label="Username" @bind-Value="@_username2" For="@(() => model2.Username)" />
            <FluentTextField Id="txtpass" Class="mt-2" Label="Password" @bind-Value="@_pwd2" For="@(() => model2.Password)" TextFieldType="@PasswordInput" />
            <FluentSpacer />
            <FluentButton @key="mykee" FormId="MySqlfomu" Loading="@isLoad" Class="save" Appearance="Appearance.Accent" Id="btnConnect" Type="ButtonType.Submit">Connect</FluentButton>
        </FluentStack >
    </FluentCard> 
</EditForm>
@code {

    [Parameter]
    public string _host2 { get; set; }

    [Parameter]
    public int _port2 { get; set; }

    [Parameter]
    public string _username2 { get; set; }

    [Parameter]
    public string _pwd2 { get; set; }
    [Parameter]
    public MysqlModel model2 { get; set; }
    [Parameter]
    public EventCallback<MysqlModel> OnValidSubmit { get; set; }
    bool isShow;
    TextFieldType PasswordInput = TextFieldType.Password;
    Icon PasswordInputIcon = new Icons.Regular.Size16.EyeOff();
    private bool isLoad = false;
    Guid mykee;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            mykee = @Guid.NewGuid();
            StateHasChanged();
        }
    }

    private async Task HandleValidSubmit()
    {
        isLoad = true;
        await Task.Delay(1000);
        await InvokeAsync(StateHasChanged);
        try
        {
        model2.Host = _host2;
        model2.Port = _port2;
        model2.Username = _username2;
        model2.Password = _pwd2;
        await OnValidSubmit.InvokeAsync(model2);
        }
        finally
        {
            isLoad = false;
            await InvokeAsync(StateHasChanged);
        }
    }
    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = new Icons.Regular.Size16.EyeOff(); 
            PasswordInput = TextFieldType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = new Icons.Regular.Size24.Eye();
            PasswordInput = TextFieldType.Text;
        }
    }
}
